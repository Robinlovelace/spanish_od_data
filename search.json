[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 spanishoddata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2024). spanishoddata: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {spanishoddata: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2024},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"zones","dir":"","previous_headings":"","what":"Zones","title":"What the Package Does (One Line, Title Case)","text":"Zones can downloaded follows:","code":"distritos = get_zones(type = \"distritos\") distritos_wgs84 = sf::st_transform(distritos, 4326) plot(distritos_wgs84)"},{"path":"/index.html","id":"estudios-basicos","dir":"","previous_headings":"","what":"Estudios basicos","title":"What the Package Does (One Line, Title Case)","text":"day ficheros-diarios folder contains file following columns: can get result, multiple files, follows: result list duckdb tables load almost instantly, can used dplyr functions. Let’s aggregation find total number trips per hour 7 days:  figure summarises 925,874,012 trips 7 days associated 135,866,524 records.","code":"# set timeout for downloads options(timeout = 600) # 10 minutes u1 = \"https://movilidad-opendata.mitma.es/estudios_basicos/por-distritos/viajes/ficheros-diarios/2024-03/20240301_Viajes_distritos.csv.gz\" f1 = basename(u1) if (!file.exists(f1)) {   download.file(u1, f1) } drv = duckdb::duckdb(\"daily.duckdb\") con = DBI::dbConnect(drv) od1 = duckdb::tbl_file(con, f1) # colnames(od1) #  [1] \"fecha\"                   \"periodo\"                 #  [3] \"origen\"                  \"destino\"                 #  [5] \"distancia\"               \"actividad_origen\"        #  [7] \"actividad_destino\"       \"estudio_origen_posible\"  #  [9] \"estudio_destino_posible\" \"residencia\"              # [11] \"renta\"                   \"edad\"                    # [13] \"sexo\"                    \"viajes\"                  # [15] \"viajes_km\" od1_head = od1 |>   head() |>   collect() od1_head |>   knitr::kable() DBI::dbDisconnect(con) od_multi_list = get_od(   subdir = \"estudios_basicos/por-distritos/viajes/ficheros-diarios\",   date_regex = \"2024-03-0[1-7]\" ) od_multi_list[[1]] # Source:   SQL [?? x 15] # Database: DuckDB v0.10.2 [robin@Linux 6.5.0-35-generic:R 4.4.0/:memory:]       fecha periodo origen  destino distancia actividad_origen actividad_destino       <dbl> <chr>   <chr>   <chr>   <chr>     <chr>            <chr>              1 20240307 00      01009_… 01001   0.5-2     frecuente        casa               2 20240307 09      01009_… 01001   0.5-2     frecuente        casa               3 20240307 18      01009_… 01001   0.5-2     frecuente        casa               4 20240307 19      01009_… 01001   0.5-2     frecuente        casa               5 20240307 20      01009_… 01001   0.5-2     frecuente        casa               6 20240307 14      01002   01001   10-50     frecuente        casa               7 20240307 22      01002   01001   10-50     frecuente        casa               8 20240307 06      01009_… 01001   10-50     frecuente        casa               9 20240307 09      01009_… 01001   10-50     frecuente        casa              10 20240307 11      01009_… 01001   10-50     frecuente        casa              # ℹ more rows # ℹ 8 more variables: estudio_origen_posible <chr>, #   estudio_destino_posible <chr>, residencia <chr>, renta <chr>, edad <chr>, #   sexo <chr>, viajes <dbl>, viajes_km <dbl> class(od_multi_list[[1]]) [1] \"tbl_duckdb_connection\" \"tbl_dbi\"               \"tbl_sql\"               [4] \"tbl_lazy\"              \"tbl\" n_per_hour = od_multi_list |>   map(~ .x |>         group_by(periodo, fecha) |>         summarise(n = n(), Trips = sum(viajes)) |>         collect()   ) |>   list_rbind() |>   mutate(Time = lubridate::ymd_h(paste0(fecha, periodo))) |>   mutate(Day = lubridate::wday(Time, label = TRUE))  n_per_hour |>   ggplot(aes(x = Time, y = Trips)) +   geom_line(aes(colour = Day)) +   labs(title = \"Number of trips per hour over 7 days\")"},{"path":"/index.html","id":"desire-lines","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"’ll use input data pick-important flows Spain, focus longer trips visualisation: results show largest flows intra-zonal. Let’s keep inter-zonal flows: can convert geographic data {od} package:  Let’s focus trips around particular area (Salamanca):  use information subset rows, capture movement within study area: Let’s plot results:","code":"od_large = od_multi_list |>   map(~ .x |>         group_by(origen, destino) |>         summarise(Trips = sum(viajes), .groups = \"drop\") |>         filter(Trips > 500) |>         collect()   ) |>   list_rbind() |>   group_by(origen, destino) |>   summarise(Trips = sum(Trips)) |>   arrange(desc(Trips)) od_large # A tibble: 37,023 × 3 # Groups:   origen [3,723]    origen  destino    Trips    <chr>   <chr>      <dbl>  1 2807908 2807908 2441404.  2 0801910 0801910 2112188.  3 0801902 0801902 2013618.  4 2807916 2807916 1821504.  5 2807911 2807911 1785981.  6 04902   04902   1690606.  7 2807913 2807913 1504484.  8 2807910 2807910 1299586.  9 0704004 0704004 1287122. 10 28106   28106   1286058. # ℹ 37,013 more rows od_large_interzonal = od_large |>   filter(origen != destino) od_large_interzonal_sf = od::od_to_sf(   od_large_interzonal,   z = distritos_wgs84 ) od_large_interzonal_sf |>   ggplot() +   geom_sf(aes(size = Trips), colour = \"red\") +   theme_void() salamanca_zones = zonebuilder::zb_zone(\"Salamanca\") distritos_salamanca = distritos_wgs84[salamanca_zones, ] plot(distritos_salamanca) ids_salamanca = distritos_salamanca$ID od_salamanca = od_multi_list |>   map(~ .x |>         filter(origen %in% ids_salamanca) |>         filter(destino %in% ids_salamanca) |>         collect()   ) |>   list_rbind() |>   group_by(origen, destino) |>   summarise(Trips = sum(viajes)) |>   arrange(Trips) od_salamanca_sf = od::od_to_sf(   od_salamanca,   z = distritos_salamanca ) od_salamanca_sf |>   filter(origen != destino) |>   ggplot() +   geom_sf(aes(colour = Trips), size = 1) +   scale_colour_viridis_c() +   theme_void()"},{"path":"/index.html","id":"disaggregating-desire-lines","dir":"","previous_headings":"","what":"Disaggregating desire lines","title":"What the Package Does (One Line, Title Case)","text":"’ll need additional dependencies: ’ll get road network OSM:  can use road network disaggregate desire lines: Let’s plot disaggregated desire lines:","code":"library(sf) library(tmap) salamanca_boundary = sf::st_union(distritos_salamanca) osm_full = osmactive::get_travel_network(salamanca_boundary) osm = osm_full[salamanca_boundary, ] drive_net = osmactive::get_driving_network(osm) drive_net_major = osmactive::get_driving_network_major(osm) cycle_net = osmactive::get_cycling_network(osm) cycle_net = osmactive::distance_to_road(cycle_net, drive_net_major) cycle_net = osmactive::classify_cycle_infrastructure(cycle_net) map_net = osmactive::plot_osm_tmap(cycle_net) map_net od_jittered = odjitter::jitter(   od_salamanca_sf,   zones = distritos_salamanca,   subpoints = drive_net,   disaggregation_threshold = 1000,   disaggregation_key = \"Trips\" ) od_jittered |>   arrange(Trips) |>   ggplot() +   geom_sf(aes(colour = Trips), size = 1) +   scale_colour_viridis_c() +   geom_sf(data = drive_net_major, colour = \"black\") +   theme_void()"},{"path":"/reference/get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the data dictionary — get_metadata","title":"Get the data dictionary — get_metadata","text":"function retrieves data dictionary specified data directory.","code":""},{"path":"/reference/get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the data dictionary — get_metadata","text":"","code":"get_metadata(data_dir = get_data_dir())"},{"path":"/reference/get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the data dictionary — get_metadata","text":"data_dir directory data stored. Defaults value returned get_data_dir().","code":""},{"path":"/reference/get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the data dictionary — get_metadata","text":"data dictionary.","code":""},{"path":"/reference/get_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the data dictionary — get_metadata","text":"","code":"# Get the data dictionary for the default data directory metadata = get_metadata() #> Getting latest data links xml #> Saving the file to: /tmp/RtmpAwEUri/data_links_2024-06-01.xml #> Error in curl::curl_download(url = xml_url, destfile = current_filename,     quiet = FALSE): HTTP error 500. names(metadata) #> Error in eval(expr, envir, enclos): object 'metadata' not found head(metadata) #> Error in eval(expr, envir, enclos): object 'metadata' not found"},{"path":"/reference/get_od.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the origin-destination data — get_od","title":"Retrieves the origin-destination data — get_od","text":"function downloads data URLs https://movilidad-opendata.mitma.es/estudios_basicos/por-distritos/viajes/ficheros-diarios/2024-03/20240301_Viajes_distritos.csv.gz file exist data directory.","code":""},{"path":"/reference/get_od.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the origin-destination data — get_od","text":"","code":"get_od(   data_dir = get_data_dir(),   subdir = \"estudios_basicos/por-distritos/viajes/ficheros-diarios\",   date_regex = \"2024-03-0[1-2]\",   read_fun = duckdb::tbl_file )"},{"path":"/reference/get_od.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the origin-destination data — get_od","text":"data_dir directory data stored. subdir subdirectory data stored. date_regex regular expression match date data download. read_fun function read data. Defaults duckdb::tbl_file.","code":""},{"path":"/reference/get_od.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the origin-destination data — get_od","text":"local path downloaded file (download_od), data frame origin-destination data (get_od).","code":""},{"path":"/reference/get_od.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the origin-destination data — get_od","text":"","code":"# Download the origin-destination data for the first two days of March 2024 if (FALSE) { od_20240301_20240302 = get_od(date_regex = \"2024-03-0[1-2]\") }"},{"path":"/reference/get_zones.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the zones data — get_zones","title":"Retrieves the zones data — get_zones","text":"function retrieves zones data specified data directory. can retrieve either \"distritos\" \"municipios\" zones data.","code":""},{"path":"/reference/get_zones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the zones data — get_zones","text":"","code":"get_zones(data_dir = get_data_dir(), type = \"distritos\")"},{"path":"/reference/get_zones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the zones data — get_zones","text":"data_dir directory data stored. type type zones data retrieve (\"distritos\" \"municipios\").","code":""},{"path":"/reference/get_zones.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the zones data — get_zones","text":"spatial object containing zones data.","code":""},{"path":"/reference/get_zones.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the zones data — get_zones","text":"","code":"zones = get_zones() #> Getting latest data links xml #> Saving the file to: /tmp/RtmpAwEUri/data_links_2024-06-01.xml #> Error in curl::curl_download(url = xml_url, destfile = current_filename,     quiet = FALSE): HTTP error 500."}]
